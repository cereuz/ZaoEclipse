package com.onezao.onezao.newstoclient1113;import java.io.InputStream;import java.net.HttpURLConnection;import java.net.URL;import android.content.Context;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.os.Handler;import android.os.Message;import android.util.AttributeSet;import android.widget.ImageView;public class MySmartImageView extends ImageView {	private Handler  handler  = new Handler(){		public void handleMessage(android.os.Message msg) {						switch (msg.what) {			case 1:  //代表请求成功				  Bitmap  bitmap  =  (Bitmap)msg.obj;				  MySmartImageView.this.setImageBitmap(bitmap);				break;             case 2:  //代表请求失败，显示一个默认图片				int resource = (Integer) msg.obj;				MySmartImageView.this.setBackgroundResource(resource);				break;             case 3:  //代表请求异常            	 int resource1 = (Integer) msg.obj; 				MySmartImageView.this.setBackgroundResource(resource1); 				break;			default:				break;			}		};	};		public MySmartImageView(Context context, AttributeSet attrs, int defStyle) {		super(context, attrs, defStyle);		// TODO Auto-generated constructor stub	}    // 在布局文件中使用的时候，调用2个参数的构造方法	public MySmartImageView(Context context, AttributeSet attrs) {		super(context, attrs);	}     //一个参数的构造方法在 new  代码初始化的时候调用	public MySmartImageView(Context context) {		super(context);	}	//显示图片的方法，是传过来的url地址	public  void setImageUrl(final String path , final int resource){				new  Thread() {@Override			public void run() {				try {			//[2.1] 去服务器去数据    http://192.168.11.86:8080/news.xml			//String path = "http://192.168.11.86:8080/news.xml";			//[2.2] 创建 URL对象指定我们要访问的网址(路径)			URL  url = new  URL(path);			//[2.3] 拿到httpurlconnection 对象，用于发送或者接受数据。			HttpURLConnection conn = (HttpURLConnection) url.openConnection();			//[2.4] 设置发送get请求			conn.setRequestMethod("GET"); // get要求大写，默认就是GET请求			// [2.5] 设置请求超时时间			conn.setConnectTimeout(5000);			// [2.6] 获取服务器返回的状态码			int code = conn.getResponseCode();			// [2.7] 如果code==200 说明请求成功			if(code == 200){				//[2.8] 获取服务器返回的数据，是以流的形式返回的，由于把流转换成字符串是一个非常常见的操作，所以我抽出一个工具类(utils)				InputStream  in = conn.getInputStream();				Bitmap bitmap = BitmapFactory.decodeStream(in);								Message msg = Message.obtain();				msg.what =1 ;				msg.obj = bitmap;				handler.sendMessage(msg);//使用handler发送消息			} else {				// 请求失败				Message  msg = Message.obtain();				msg.what =2 ;				msg.obj = resource;				handler.sendMessage(msg);//使用handler发送消息			}		} catch (Exception e) {			e.printStackTrace();			// 请求异常			Message  msg = Message.obtain();			msg.what =3 ;			msg.obj = resource;			handler.sendMessage(msg);//使用handler发送消息		}		};}.start();	}}